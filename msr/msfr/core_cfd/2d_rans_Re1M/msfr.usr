#include "experimental/rans_komg.f"

c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      include "utilities.f"
      include "limits.f"
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'RANS_KOMG'

      integer e
      e = gllel(eg)

      Pr_t=coeffs(1)
      mu_t=rans_mut(ix,iy,iz,e)

      utrans = cpfld(ifield,2)
      if(ifield.eq.1) then
        udiff = cpfld(ifield,1)+mu_t
      elseif(ifield.eq.2) then !temperature
        udiff = cpfld(ifield,1)+mu_t*cpfld(ifield,2)/(Pr_t*cpfld(1,2))
      elseif(ifield.eq.3) then !tke
        udiff = cpfld(1,1)+rans_mutsk(ix,iy,iz,e)
      elseif(ifield.eq.4) then !tau
        udiff = cpfld(1,1)+rans_mutso(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      e = gllel(eg)

      qvol   = 0.0
      avol   = 0.0
      if(ifield.eq.3) then
        qvol = rans_kSrc(ix,iy,iz,e)
        avol = rans_kDiag(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        qvol = rans_omgSrc(ix,iy,iz,e)
        avol = rans_omgDiag(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer ix,iy,iz,iside,e,eg
      real tke_tmp,tau_tmp
      e = gllel(eg)

      ux   =-1.72845874696*(1-(y-2.0525)*(y-2.0525)/0.01380625)
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      call turb_in(wd(ix,iy,iz,e),tke_tmp,tau_tmp)
      if(ifield.eq.3) temp = tke_tmp
      if(ifield.eq.4) temp = tau_tmp

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg

      e = gllel(eg)

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
C      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)
      real m1

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)
      real norm(3),pt(3),eps,planar_ave_m1,umean

      norm(1) = 1.0
      norm(2) = 0.0
      norm(3) = 0.0
      pt(1) = 0.0
      pt(2) = 0.0
      pt(3) = 0.0
      eps = 0.02

      if(mod(istep,100).eq.0) then
        call print_limits
        call y_p_limits(wd,.true.)
        umean=planar_ave_m1(vx,norm,pt,eps)
        if(nio.eq.0) then
          write(6,'(a15,es13.4)') "umean:",umean
          write(6,*)
        endif
        call get_mut(t(1,1,1,1,1))
      endif

Cc turbulent outflow bc
C      rq  = 4.
C      uin = 0.
C      call turb_outflow(d,m1,rq,uin)

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      integer iel, ifc, id_face
      integer i, e, f, n
      real dhi

      ntot = nx1*ny1*nz1*nelt

      do iel=1,nelt
      do ifc=1,2*ndim
         id_face = bc(5,ifc,iel,1)
         if (id_face.eq.1) then         ! inlet 
             cbc(ifc,iel,1) = 'v  '
         elseif (id_face.eq.2) then     ! outlet 
             cbc(ifc,iel,1) = 'O  '
         elseif (id_face.eq.3) then     ! wall 
             cbc(ifc,iel,1) = 'W  '
         elseif (id_face.eq.4) then     ! centerline (axisymmetric) 
             cbc(ifc,iel,1) = 'A  '
         endif
      enddo
      enddo

      do i=2,ldimt1
      do e=1,nelt
      do f=1,ldim*2
        cbc(f,e,i)=cbc(f,e,1)
        if(cbc(f,e,1).eq.'W  ') cbc(f,e,i)='t  '
        if(cbc(f,e,1).eq.'v  ') cbc(f,e,i)='t  '
      enddo
      enddo
      enddo
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      real wd(lx1,ly1,lz1,lelv)
      common /walldist/ wd

      logical ifcoefs

C     initialize the RANS model
      ifld_k = 3 !address of tke
      ifld_t = 4 !address of tau
      ifcoefs = .false.

C     Supported models:
c     id_m = 0 !regularized high-Re k-omega (no wall functions)
c     id_m = 1 !regularized low-Re k-omega
c     id_m = 2 !regularized high-Re k-omega SST (no wall functions)
c     id_m = 3 !regularized low-Re k-omega SST
      id_m = 4 !standard k-tau

C     Wall distance function:
c     id_w = 0 ! user specified
c     id_w = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
      id_w = 2 ! distf (coordinate difference, provides smoother function)

      call rans_init(ifld_k,ifld_t,ifcoefs,coefs,id_w,wd,id_m)

      return
      end
C-----------------------------------------------------------------------
      subroutine turb_in(wd,tke,tau)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer ix,iy,iz,e
      real wd,tke,tau

      real Re,darcy,utau,sigk,kmax,yplus,yk

      Re = 1.0/param(2)
      darcy = 0.316/(Re**0.25)
      utau = sqrt(darcy/8.0)
      sigk = 0.6
      kmax = 2.5*utau*utau
      yplus = max(wd*utau*Re,1.0e-6)
      yk=30.0

      tke=kmax*exp(-(log10(yplus/yk))**2.0/(2.0*sigk**2))
      tau=0.012*wd**2.0/cpfld(ifield,1)

      return
      end
c-----------------------------------------------------------------------
      subroutine get_mut(phi)
      include 'SIZE'
      include 'TOTAL'

      real phi(lx1,ly1,lz1,1)

      do ie=1,nelv
      do k=1,nz1
      do j=1,ny1
      do i=1,nx1
        phi(i,j,k,ie)=max(rans_mut(i,j,k,ie),0.0)
      enddo
      enddo
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
